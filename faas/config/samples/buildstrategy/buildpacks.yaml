apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: buildpacks-cache
spec:
  resources:
    requests:
      storage: 10Gi
  # storageClassName: "openebs-hostpath"
  # storageClassName: ""
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
apiVersion: faas.czlingo.io/v1alpha1
kind: BuildStrategy
metadata:
  name: faas-buildstrategy-buildpacks
spec:
  volumes:
    - name: cache
      persistentVolumeClaim:
        claimName: buildpacks-cache
    - name: cert
      hostPath: 
        path: /etc/ssl
        type: Directory
  params:
    - name: APP_IMAGE
      description: The name of where to store the app image.
    - name: BUILDER_IMAGE
      description: The image on which builds will run (must include lifecycle and compatible buildpacks).
    - name: CACHE_IMAGE
      description: The name of the persistent app cache image (if no cache workspace is provided).
      default: ""
    - name: SOURCE_SUBPATH
      description: A subpath within the `source` input where the source to build is located.
      default: ""
    # - name: ENV_VARS
    #   type: array
    #   description: Environment variables to set during _build-time_.
    #   default: []
    - name: PROCESS_TYPE
      description: The default process type to set on the image.
      default: "web"
    - name: RUN_IMAGE
      description: Reference to a run image to use.
      default: ""
    - name: SKIP_RESTORE
      description: Do not write layer metadata or restore cached layers.
      default: "false"
    - name: USER_ID
      description: The user ID of the builder image user.
      default: "1000"
    - name: GROUP_ID
      description: The group ID of the builder image user.
      default: "1000"
    - name: PLATFORM_DIR
      description: The name of the platform directory.
      default: empty-dir
  steps:
    - name: build-and-push
      image: $(params.BUILDER_IMAGE)
      script: |
        #!/usr/bin/env bash
        set -e

        # TODO: buildpacks strategy


        # TODO: define enviroment variables
        # if [[ -f "$" ]]
        cp -r /credential/docker ~/.docker
        mv ~/.docker/.dockerconfigjson ~/.docker/config.json

        # if [[ "$(workspaces.cache.bound)" == "true" ]]; then
        #   echo "> Setting permissions on '$(workspaces.cache.path)'..."
        #   chown -R "$(params.USER_ID):$(params.GROUP_ID)" "$(workspaces.cache.path)"
        # fi

        # for path in "/tekton/home" "/layers" "$(workspaces.source.path)"; do
        #   echo "> Setting permissions on '$path'..."
        #   chown -R "$(params.USER_ID):$(params.GROUP_ID)" "$path"
        # done

        /cnb/lifecycle/creator \
          -app=$WORKSPACE_SOURCES/$(params.SOURCE_SUBPATH) \
          -cache-dir=/build/cache \
          -cache-image=$(params.CACHE_IMAGE) \
          -uid=$(params.USER_ID) \
          -gid=$(params.GROUP_ID) \
          -layers=/layers \
          -platform=/platform \
          -report=/layers/report.toml \
          -process-type=$(params.PROCESS_TYPE) \
          -skip-restore=$(params.SKIP_RESTORE) \
          -previous-image=$(params.APP_IMAGE) \
          -run-image=$(params.RUN_IMAGE) \
          $(params.APP_IMAGE)
      volumeMounts:
        - name: cache
          mountPath: /build/cache
        - name: cert
          mountPath: /etc/ssl